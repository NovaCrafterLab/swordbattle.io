version: '3.9'

services:
  db:
    image: postgres:16-alpine
    env_file:
      - ./env/api.env.development
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: postgres
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USERNAME}']
      interval: 5s
      retries: 20
    restart: unless-stopped
    networks: [backnet]

  api:
    build:
      context: ./api
      target: runtime
    env_file:
      - ./env/api.env.development
    environment:
      - API_PORT
      - DB_URL
      - APP_SECRET
      - SERVER_SECRET
      - USE_SSL
    depends_on:
      db:
        condition: service_healthy
    ports:
      - '8090:8080'
    restart: unless-stopped
    networks: [backnet]

  server:
    build:
      context: ./server
      target: runtime
    env_file:
      - ./env/server.env.development
    environment:
      - SERVER_PORT
      - API_ENDPOINT
      - SERVER_SECRET
      - DEBUG
      - RECAPTCHA_SECRET_KEY
    depends_on:
      api:
        condition: service_started
    ports:
      - '8000:8000'
    restart: unless-stopped
    networks: [backnet]

  client:
    build:
      context: ./client
      target: runtime
      args:
        REACT_APP_API: ${REACT_APP_API}
        REACT_APP_ENDPOINT_DEV: ${REACT_APP_ENDPOINT_DEV}
        REACT_APP_ENDPOINT_TEST: ${REACT_APP_ENDPOINT_TEST}
    env_file:
      - ./env/client.env.development
    ports:
      - '3000:80'
    depends_on:
      - server
    restart: unless-stopped
    networks: [backnet]

volumes:
  db_data:

networks:
  backnet:
    driver: bridge
